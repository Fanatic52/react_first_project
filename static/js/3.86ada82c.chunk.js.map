{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHocks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Posts.jsx","components/Profile/MyPosts/MyPostsForms.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHocks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","profile","className","style","descriptionBlock","src","photos","large","alt","Preloader","Posts","PostsCss","item","message","likes","maxLength10","maxLengthCreator","AddNewPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","MyPosts","postsElements","posts","reverse","map","post","id","MyPostsCss","postsBlock","values","addPost","newPostText","React","memo","MyPostsContainer","connect","state","profilePage","dispatch","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.86ada82c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Rk5_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3vxKu\",\"posts\":\"MyPosts_posts__2wiPe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__JkiDt\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHocks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                        <span onDoubleClick={activateMode}>\r\n                            { props.status || \"=====\"}\r\n                        </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHocks;","import React from 'react';\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHocks from \"./ProfileStatusWithHocks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus}) => {\r\n    if(!profile) {\r\n        return <Preloader />\r\n    }\r\n    //todo process a situation when photo is null\r\n    return (\r\n        <div>\r\n            <div className={style.descriptionBlock}>\r\n                <img src={profile.photos.large} alt=\"avatar\"/>\r\n                ava + description\r\n                <ProfileStatusWithHocks\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport PostsCss from './Posts.module.css';\r\n\r\nconst Posts = (props) => {\r\n    return (\r\n        <div className={PostsCss.item}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXg1MHjGJ-sxWWf-oOWEXtatJc4iiJFhE-LQ&usqp=CAU'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like : {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostComponent = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                    name=\"newPostText\"\r\n                    placeholder=\"Enter your post\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostForm = reduxForm({\r\n    form: \"profileAddPostForm\"\r\n})(AddNewPostComponent);\r\n\r\nexport default AddNewPostForm;","import React from 'react';\r\nimport MyPostsCss from './MyPosts.module.css';\r\nimport Posts from \"./Post/Posts\";\r\nimport AddNewPostForm from \"./MyPostsForms\";\r\n\r\nlet MyPosts = (props) => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(post => <Posts message={post.message} likes={post.likes} key={post.id}/>)\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={MyPostsCss.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div className={MyPostsCss.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nMyPosts = React.memo(MyPosts);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost} from \"../../../redux/reducers/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPost(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/reducers/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n)(ProfileContainer);"],"sourceRoot":""}